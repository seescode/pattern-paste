import { ActionsCreatorService } from './../../actions/actionsCreatorService';
import { Router } from '@angular/router';
import { AppState } from './../../reducers/index';
import { Store } from '@ngrx/store';
import { Budget } from './../../models/interfaces';
import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';
import { UUID } from 'angular2-uuid';
import * as moment from 'moment';
import { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';


@Component({
  selector: 'yb-add-new-author-page',
  templateUrl: './add-new-author-page.component.html',
  styleUrls: ['./add-new-author-page.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AddBudgetPageComponent {
  newAuthor: FormGroup;

  constructor(private store: Store<AppState>, private router: Router,
    private actions: ActionsCreatorService) {

    // Great article on reactive forms:
    // https://toddmotto.com/reactive-formgroup-validation-angular-2
    this.newAuthor = new FormGroup({
      newAuthorName: new FormControl(null, [Validators.required]),
      newAuthorAmount: new FormControl(null, [this.positiveNumber]),
      newAuthorDate: new FormGroup({
        newAuthorStartDate: new FormControl(null),
        newAuthorEndDate: new FormControl(null)
      }, this.endDateIsAfterStartDate.bind(this))
    });
  }

  addBudget() {
    const inputs = this.newAuthor.value;
    const startDate = this.getMomentDate(inputs.newAuthorDate.newAuthorStartDate);
    const endDate = this.getMomentDate(inputs.newAuthorDate.newAuthorEndDate);

    this.store.dispatch(this.actions.addBudget(inputs.newAuthorName, '',
      parseFloat(inputs.newAuthorAmount), startDate.toDate(), endDate.toDate()));

    this.manageBudgets();
  }

  positiveNumber(control: FormControl): { [s: string]: boolean } {

    if (control.value && control.value.match(/^\d+\.?\d?\d?$/)) {
      return null;
    }

    return { 'invalidNumber': true };
  }

  getMomentDate(newAuthorDate: any) {
    const parsedDate = newAuthorDate.split('-');
    return moment([parsedDate[0], parsedDate[1] - 1]);
  }

  endDateIsAfterStartDate(control: AbstractControl): { [key: string]: boolean } {

    const newAuthorStartDate = control.get('newAuthorStartDate').value;
    const newAuthorEndDate = control.get('newAuthorEndDate').value;

    if (newAuthorStartDate == null || newAuthorEndDate == null) {
      return { 'startDateIsAfterEndDate': true };
    }

    const startDate = this.getMomentDate(newAuthorStartDate);
    const endDate = this.getMomentDate(newAuthorEndDate);

    if (startDate.isAfter(endDate)) {
      return { 'startDateIsAfterEndDate': true };
    }

    return null;
  };

  manageBudgets() {
    this.router.navigateByUrl('/new-author-list');
  }
}